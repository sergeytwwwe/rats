```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import sqlite3
import random
import time
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("7989938055:AAHk9IN-raJtqB8pvCoIDFduQnK42JLYhE4")
ALLOWED_USER_ID = 6710064443
last_command_time = 0
COOLDOWN = 2
current_device = {}

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã
STUPID_RESPONSES = [
    "–¢—ã —á—Ç–æ, –¥–µ–±–∏–ª? –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç! –ü–∏—à–∏ /start",
    "–î–∞ –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –ø–∏—à–∏ /start!",
    "–û—Ö—É–µ—Ç—å, –æ–ø—è—Ç—å —Ç—ã —Ö—É–π–Ω—é –Ω–∞–ø–∏—Å–∞–ª! –ü–∏—à–∏ /start",
    "–ë–ª—è—Ç—å, –Ω–∞—É—á–∏—Å—å —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –¥–∞—É–Ω! –ü–∏—à–∏ /start",
    "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–µ—Ç–∏–Ω! –ü–∏—à–∏ /start"
]

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_main_menu():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")],
            [types.KeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")]
        ],
        resize_keyboard=True
    )

# –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def create_device_menu(device_name):
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç"), types.KeyboardButton(text="üì∏ –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")],
            [types.KeyboardButton(text="üé• –°–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ"), types.KeyboardButton(text="üé• –í–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")],
            [types.KeyboardButton(text="üéô –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞"), types.KeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
            [types.KeyboardButton(text="üõ° –ê–Ω—Ç–∏–≤–∏—Ä—É—Å"), types.KeyboardButton(text="üìä –ü—Ä–æ—Ü–µ—Å—Å—ã")],
            [types.KeyboardButton(text="üíÄ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"), types.KeyboardButton(text="üíÄ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")],
            [types.KeyboardButton(text="‚å®Ô∏è –ù–∞–∂–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à"), types.KeyboardButton(text="‚¨áÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ")],
            [types.KeyboardButton(text="üì• –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ"), types.KeyboardButton(text="üñ± –î–µ—Ä–≥–∞—Ç—å –º—ã—à–∫–æ–π")],
            [types.KeyboardButton(text="üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"), types.KeyboardButton(text="üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫")],
            [types.KeyboardButton(text="üîå –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"), types.KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º")]
        ],
        resize_keyboard=True
    )

# –ú–µ–Ω—é —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
def create_devices_menu():
    devices = get_devices()
    keyboard = []
    for device in devices:
        keyboard.append([types.KeyboardButton(text=f"‚ùì {device[0]}")])
    keyboard.append([types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_devices():
    devices = []
    try:
        conn = sqlite3.connect("devises.db")
        cursor = conn.cursor()
        cursor.execute("SELECT name, last_seen, status FROM devices ORDER BY last_seen DESC")
        devices = [(row[0], row[1], row[2]) for row in cursor.fetchall()]
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    return devices

def add_device(pc_name):
    try:
        conn = sqlite3.connect("devises.db")
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO devices (name, last_seen, status) VALUES (?, datetime('now'), ?)", (pc_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    global last_command_time
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    current_time = time.time()
    if current_time - last_command_time < COOLDOWN:
        spam_message = await message.answer(f"üñï –•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –¥–µ–±–∏–ª! –ñ–¥–∏ {COOLDOWN} —Å–µ–∫!")
        await asyncio.sleep(COOLDOWN)
        await bot.delete_message(chat_id=message.chat.id, message_id=spam_message.message_id)
        return
    
    last_command_time = current_time
    current_device[message.from_user.id] = None
    await message.answer("üëä –ü—Ä–∏–≤–µ—Ç, –¥–µ–±–∏–ª! –ñ–º–∏ /menu.", reply_markup=create_main_menu())

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    global last_command_time
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    current_time = time.time()
    if current_time - last_command_time < COOLDOWN:
        spam_message = await message.answer(f"üñï –•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –¥–µ–±–∏–ª! –ñ–¥–∏ {COOLDOWN} —Å–µ–∫!")
        await asyncio.sleep(COOLDOWN)
        await bot.delete_message(chat_id=message.chat.id, message_id=spam_message.message_id)
        return
    
    last_command_time = current_time
    current_device[message.from_user.id] = None
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –¥–µ–±–∏–ª:", reply_markup=create_main_menu())

@dp.message(lambda message: message.text == "üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
async def handle_devices(message: types.Message):
    global last_command_time
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    current_time = time.time()
    if current_time - last_command_time < COOLDOWN:
        spam_message = await message.answer(f"üñï –•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –¥–µ–±–∏–ª! –ñ–¥–∏ {COOLDOWN} —Å–µ–∫!")
        await asyncio.sleep(COOLDOWN)
        await bot.delete_message(chat_id=message.chat.id, message_id=spam_message.message_id)
        return
    
    last_command_time = current_time
    await message.answer("üìã –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=create_devices_menu())

@dp.message(lambda message: message.text.startswith("‚ùì "))
async def handle_device_select(message: types.Message):
    global last_command_time
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    current_time = time.time()
    if current_time - last_command_time < COOLDOWN:
        spam_message = await message.answer(f"üñï –•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –¥–µ–±–∏–ª! –ñ–¥–∏ {COOLDOWN} —Å–µ–∫!")
        await asyncio.sleep(COOLDOWN)
        await bot.delete_message(chat_id=message.chat.id, message_id=spam_message.message_id)
        return
    
    last_command_time = current_time
    device_name = message.text[2:]
    current_device[message.from_user.id] = device_name
    await message.answer(f"üì± {device_name}", reply_markup=create_device_menu(device_name))

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º")
async def handle_back_to_devices(message: types.Message):
    global last_command_time
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    current_time = time.time()
    if current_time - last_command_time < COOLDOWN:
        spam_message = await message.answer(f"üñï –•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –¥–µ–±–∏–ª! –ñ–¥–∏ {COOLDOWN} —Å–µ–∫!")
        await asyncio.sleep(COOLDOWN)
        await bot.delete_message(chat_id=message.chat.id, message_id=spam_message.message_id)
        return
    
    last_command_time = current_time
    await message.answer("üìã –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=create_devices_menu())

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def handle_back_to_menu(message: types.Message):
    global last_command_time
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    current_time = time.time()
    if current_time - last_command_time < COOLDOWN:
        spam_message = await message.answer(f"üñï –•–≤–∞—Ç–∏—Ç —Å–ø–∞–º–∏—Ç—å, –¥–µ–±–∏–ª! –ñ–¥–∏ {COOLDOWN} —Å–µ–∫!")
        await asyncio.sleep(COOLDOWN)
        await bot.delete_message(chat_id=message.chat.id, message_id=spam_message.message_id)
        return
    
    last_command_time = current_time
    current_device[message.from_user.id] = None
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –¥–µ–±–∏–ª:", reply_markup=create_main_menu())

@dp.message(lambda message: "üñ•Ô∏è –ù–æ–≤—ã–π –ü–ö –ø–æ–¥–∫–ª—é—á–µ–Ω:" in message.text)
async def handle_new_device(message: types.Message):
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    pc_name = message.text.replace("üñ•Ô∏è –ù–æ–≤—ã–π –ü–ö –ø–æ–¥–∫–ª—é—á–µ–Ω: ", "").split("üöÄ")[0].strip()
    if pc_name:
        add_device(pc_name)
        await message.answer(f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {pc_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ, –¥–µ–±–∏–ª!", reply_markup=create_devices_menu())

@dp.message()
async def handle_unknown(message: types.Message):
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("üñï –ü–æ—Ö–µ—Ä, —Ç—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω!")
        return
    
    await message.answer(random.choice(STUPID_RESPONSES))

async def on_startup(_):
    webhook_url = os.environ.get("WEBHOOK_URL", f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/webhook")
    await bot.set_webhook(url=webhook_url)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(_):
    await bot.delete_webhook()
    logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω")

def main():
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token="")
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8443)))

if __name__ == "__main__":
    logger.info("üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–æ–≤...")
    main()
```